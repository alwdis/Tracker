/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —ç–ø–∏–∑–æ–¥–µ
 * @param {Object} item - –≠–ª–µ–º–µ–Ω—Ç –º–µ–¥–∏–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Date} lastCheckTime - –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Object|null} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º —ç–ø–∏–∑–æ–¥–µ –∏–ª–∏ null
 */
export const checkForNewEpisode = async (item, lastCheckTime) => {
  if (!item.tvmazeId) {
    console.log(`No TVMaze ID for ${item.title}`);
    return null;
  }

  try {
    let nextEpisode = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ TVMaze (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
    if (item.tvmazeId) {
      try {
        const { getNextEpisode } = await import('./tvmazeService');
        nextEpisode = await getNextEpisode(item.tvmazeId);
      } catch (error) {
        console.error(`Error getting next episode from TVMaze for ${item.title}:`, error);
      }
    }
    
    if (!nextEpisode) return null;
    
    const episodeDate = new Date(nextEpisode.airstamp || nextEpisode.airDate);
    const now = new Date();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—à–µ–ª –ª–∏ —ç–ø–∏–∑–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (episodeDate <= now && (!lastCheckTime || episodeDate > lastCheckTime)) {
      return {
        type: 'new_episode',
        showId: item.id,
        showTitle: item.title,
        episode: {
          season: nextEpisode.season || nextEpisode.seasonNumber,
          number: nextEpisode.number || nextEpisode.episodeNumber,
          name: nextEpisode.name,
          aired: episodeDate,
        },
      };
    }
    
    return null;
  } catch (error) {
    console.error(`Error checking episode for ${item.title}:`, error);
    return null;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–µ—Ä–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤—ã–µ —ç–ø–∏–∑–æ–¥—ã
 */
export const checkAllShows = async (allItems, lastCheckTime) => {
  const series = allItems.filter(item => 
    item.type === 'series' && 
    (item.status === 'watching' || item.status === 'planned')
  );
  
  const notifications = [];
  
  for (const item of series) {
    try {
      const notification = await checkForNewEpisode(item, lastCheckTime);
      if (notification) {
        notifications.push(notification);
      }
    } catch (error) {
      console.error(`Error checking ${item.title}:`, error);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  return notifications;
};

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —ç–ø–∏–∑–æ–¥–µ
 */
export const createEpisodeNotificationText = (notification) => {
  return {
    title: `üé¨ –ù–æ–≤—ã–π —ç–ø–∏–∑–æ–¥: ${notification.showTitle}`,
    body: `S${notification.episode.season}E${notification.episode.number}: ${notification.episode.name}`,
    data: {
      type: 'new_episode',
      showId: notification.showId,
      episodeSeason: notification.episode.season,
      episodeNumber: notification.episode.number,
    },
  };
};

/**
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∫ background job)
 */
export const startEpisodeCheckService = async (allItems, notificationCallback, intervalMinutes = 60) => {
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const check = async () => {
    const lastCheckTime = new Date(Date.now() - intervalMinutes * 60 * 1000);
    const notifications = await checkAllShows(allItems, lastCheckTime);
    
    if (notifications.length > 0) {
      notifications.forEach(notification => {
        const text = createEpisodeNotificationText(notification);
        notificationCallback(text);
      });
    }
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
  await check();
  
  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ intervalMinutes
  setInterval(check, intervalMinutes * 60 * 1000);
};

