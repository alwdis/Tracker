name: Release (Windows - Smart Auto Release)

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_DEBUG: "true"
      DEBUG: "electron-builder"
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      USE_HARD_LINKS: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Smart install: npm ci on tags, npm install otherwise
      - name: Install deps (CI on tags)
        if: startsWith(github.ref, 'refs/tags/v')
        run: npm ci

      - name: Install deps (Install on branches/PRs)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: npm install

      - name: Build renderer (if present)
        run: npm run build

      - name: Print versions
        run: |
          node -v
          npm -v
          npx electron-builder --version

      - name: List build dir (pre-build)
        shell: pwsh
        run: |
          if (Test-Path "build") { Write-Host "`n--- build/ ---"; Get-ChildItem -Recurse -Force build | Select-Object FullName,Length | Format-Table -AutoSize }

      # âœ… Package only (no publish) on branches/PRs
      - name: Package app (no publish)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: npx electron-builder --win

      - name: Upload dist as artifact (branches/PRs)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v4
        with:
          name: dist-win
          path: dist/**
          if-no-files-found: error

      # ðŸš€ Build & publish only on tags v*
      - name: Build & Publish (Windows)
        if: startsWith(github.ref, 'refs/tags/v')
        run: npx electron-builder --win --publish always

      - name: List dist after build
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "dist") { Write-Host "`n--- dist/ ---"; Get-ChildItem -Recurse -Force dist | Select-Object FullName,Length | Format-Table -AutoSize }

      # ðŸŽ¯ Smart Auto-release: Create or Update release with binaries
      - name: Check if release exists
        if: startsWith(github.ref, 'refs/tags/v')
        id: check_release
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Checking for existing release: $TAG_NAME"
          
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG_NAME already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG_NAME does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release with Binaries
        if: startsWith(github.ref, 'refs/tags/v') && steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.yml
            dist/*.zip
            dist/*.tar.gz
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release with Binaries
        if: startsWith(github.ref, 'refs/tags/v') && steps.check_release.outputs.exists == 'true'
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Updating existing release: $TAG_NAME"
          
          # Upload all binary files to existing release
          for file in dist/*.exe dist/*.yml dist/*.zip dist/*.tar.gz dist/*.dmg dist/*.AppImage dist/*.deb dist/*.rpm; do
            if [ -f "$file" ]; then
              echo "Uploading $file to release $TAG_NAME"
              gh release upload "$TAG_NAME" "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
