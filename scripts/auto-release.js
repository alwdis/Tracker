const { execSync } = require('child_process');
const fs = require('fs');

const { execSync } = require('child_process');
const fs = require('fs');

function getChangesSinceLastTag() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
    const lastTag = execSync('git describe --tags --abbrev=0', { encoding: 'utf8' }).trim();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
    const commits = execSync(`git log ${lastTag}..HEAD --oneline --pretty=format:"- %s"`, { encoding: 'utf8' });
    
    return commits.trim();
  } catch (error) {
    // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
    const commits = execSync('git log --oneline -10 --pretty=format:"- %s"', { encoding: 'utf8' });
    return commits.trim();
  }
}

function generateReleaseNotes(version, type) {
  const changes = getChangesSinceLastTag();
  
  let releaseType = '';
  switch (type) {
    case 'major':
      releaseType = 'üöÄ Major Release';
      break;
    case 'minor':
      releaseType = '‚ú® Feature Release';
      break;
    case 'patch':
      releaseType = 'üêõ Bugfix Release';
      break;
  }
  
  const releaseNotes = `# Tracker v${version} - ${releaseType}

## üìù –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

${changes || '- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è'}

## üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞

1. –°–∫–∞—á–∞–π—Ç–µ \`Tracker-Setup-${version}.exe\` –∏–∑ Assets –Ω–∏–∂–µ
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞

## üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.

---

**–†–∞–∑–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞**: ~76 –ú–ë  
**–í–µ—Ä—Å–∏—è**: ${version}  
**–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞**: ${new Date().toLocaleDateString('ru-RU')}`;

  return releaseNotes;
}

function updateVersion(type = 'patch') {
  console.log(`Updating ${type} version...`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ package.json
  execSync(`npm version ${type}`, { stdio: 'inherit' });
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const version = packageJson.version;
  
  console.log(`New version: ${version}`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ —Ä–µ–ª–∏–∑–µ
  const releaseNotes = generateReleaseNotes(version, type);
  const releaseNotesPath = `RELEASE_NOTES_v${version}.md`;
  
  fs.writeFileSync(releaseNotesPath, releaseNotes);
  console.log(`Created release notes: ${releaseNotesPath}`);
  
  return version;
}

function createTagAndPush(version) {
  const tagName = `v${version}`;
  
  console.log(`Creating tag ${tagName}...`);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
  execSync(`git add .`, { stdio: 'inherit' });
  execSync(`git commit -m "Release ${tagName}"`, { stdio: 'inherit' });
  execSync(`git tag -a ${tagName} -m "Release ${tagName}"`, { stdio: 'inherit' });
  
  // –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–µ–≥
  execSync(`git push`, { stdio: 'inherit' });
  execSync(`git push origin ${tagName}`, { stdio: 'inherit' });
  
  console.log(`Tag ${tagName} created and pushed`);
  console.log('GitHub Actions will now build and create the release automatically!');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const type = process.argv[2] || 'patch';
  
  if (!['patch', 'minor', 'major'].includes(type)) {
    console.error('Version type must be patch, minor, or major');
    process.exit(1);
  }
  
  try {
    const version = updateVersion(type);
    createTagAndPush(version);
    
    console.log(`\nüéâ Release ${version} initiated!`);
    console.log('Check GitHub Actions for build progress:');
    console.log('https://github.com/alwdis/Tracker/actions');
    
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}

main();
