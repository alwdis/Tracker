/**
 * –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∞–ª–∞—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */

/**
 * –ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞ —á–µ—Ä–µ–∑ TVMaze
 */
export const searchShowMultipleSources = async (query) => {
  try {
    console.log('üîç –ò—â—É –≤ TVMaze...');
    const { searchShow } = await import('./tvmazeService');
    const results = await searchShow(query);
    
    if (results.length > 0) {
      return {
        success: true,
        provider: 'TVMaze',
        results: results.map(item => ({
          id: item.id,
          title: item.name,
          year: item.premiered?.split('-')[0] || null,
          description: item.summary || '',
          poster: item.image,
          network: item.network,
          country: item.country,
          status: item.status, // 'Running', 'Ended'
          genres: item.genres || [],
          source: 'tvmaze',
          sourceId: item.id,
        })),
      };
    }
    
    return {
      success: false,
      error: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      results: [],
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ TVMaze:', error);
    return {
      success: false,
      error: error.message,
      results: [],
    };
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ
 */
export const getShowDetailsMultipleSources = async (source, sourceId) => {
  if (source === 'tvmaze') {
    try {
      const { getShowDetails, getShowEpisodes } = await import('./tvmazeService');
      const details = await getShowDetails(sourceId);
      const episodes = await getShowEpisodes(sourceId);
      
      return {
        success: true,
        ...details,
        episodes,
        totalEpisodes: episodes.length,
        totalSeasons: Math.max(...episodes.map(e => e.season), 0),
      };
    } catch (error) {
      console.error('TVMaze error:', error);
      return { success: false, error: error.message };
    }
  }
  
  return { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫' };
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (TVMaze)
 */
export const checkAvailableSources = async () => {
  const results = [];
  
  try {
    const { searchShow } = await import('./tvmazeService');
    const test = await searchShow('Breaking Bad');
    results.push({
      provider: 'TVMaze',
      available: test.length > 0,
      message: test.length > 0 ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
    });
  } catch (error) {
    results.push({
      provider: 'TVMaze',
      available: false,
      message: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
    });
  }
  
  return results;
};

